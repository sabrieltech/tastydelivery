networks:
  fooddelivery-net:
    driver: bridge
    name: fooddelivery-net

volumes:
  rabbitmq_data:
    driver: local

services:
  ###################################
  # RabbitMQ: The messaging broker
  ###################################
  rabbitmq:
    image: rabbitmq:management
    hostname: rabbitmq  # Update this to 'rabbitmq' for Docker service name
    restart: always
    ports:
      - "5672:5672"    # AMQP protocol
      - "15672:15672"  # RabbitMQ Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq  # Persist RabbitMQ data
    networks:
      - fooddelivery-net

  ###################################
  # Customer: The Customer microservice
  ###################################
  customer:
    build:
      context: ./customer/
      dockerfile: customer.Dockerfile
    image: fooddelivery/customer:latest
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root:root@host.docker.internal:8889/fooddelivery1
      PYTHONUNBUFFERED: 1
    ports:
      - "5006:5006"
    networks:
      - fooddelivery-net

  ###################################
  # Restaurant: The Restaurant microservice
  ###################################
  restaurant:
    build:
      context: ./restaurant/
      dockerfile: restaurant.Dockerfile
    image: fooddelivery/restaurant:latest
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root:root@host.docker.internal:8889/fooddelivery1
      PYTHONUNBUFFERED: 1
    ports:
      - "5007:5007"
    networks:
      - fooddelivery-net

  ###################################
  # Restaurant Inventory: The Restaurant Inventory microservice
  ###################################
  restaurant_inventory:
    build:
      context: ./restaurant_inventory/
      dockerfile: restaurant_inventory.Dockerfile
    image: fooddelivery/restaurant_inventory:latest
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root:root@host.docker.internal:8889/fooddelivery1
      PYTHONUNBUFFERED: 1
    ports:
      - "5008:5008"
    networks:
      - fooddelivery-net

  ###################################
  # Transaction: The Transaction microservice
  ###################################
  transaction:
    build:
      context: ./transaction/
      dockerfile: transaction.Dockerfile
    image: fooddelivery/transaction:latest
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root:root@host.docker.internal:8889/fooddelivery1
      PYTHONUNBUFFERED: 1
    ports:
      - "5009:5009"
    networks:
      - fooddelivery-net

  ###################################
  # Transaction Item: The Transaction Item microservice
  ###################################
  transaction_item:
    build:
      context: ./transaction_item/
      dockerfile: transaction_item.Dockerfile
    image: fooddelivery/transaction_item:latest
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root:root@host.docker.internal:8889/fooddelivery1
      PYTHONUNBUFFERED: 1
    ports:
      - "5010:5010"
    networks:
      - fooddelivery-net

  ###################################
  # Notification: The Notification microservice
  ###################################
  notification:
    build:
      context: ./notification/
      dockerfile: notification.Dockerfile
    image: fooddelivery/notification:latest
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root:root@host.docker.internal:8889/fooddelivery1
      PYTHONUNBUFFERED: 1
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672"  
    ports:
      - "5011:5011"
    networks:
      - fooddelivery-net
    depends_on:
      - rabbitmq

  ###################################
  # Voucher: The Voucher microservice
  ###################################
  voucher:
    build:
      context: ./voucher/
      dockerfile: voucher.Dockerfile
    image: fooddelivery/voucher:latest
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root:root@host.docker.internal:8889/fooddelivery1
      PYTHONUNBUFFERED: 1
    ports:
      - "5012:5012"
    networks:
      - fooddelivery-net

  ###################################
  # Rider: The Rider microservice
  ###################################
  rider:
    build:
      context: ./rider/
      dockerfile: rider.Dockerfile
    image: fooddelivery/rider:latest
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root:root@host.docker.internal:8889/fooddelivery1
      PYTHONUNBUFFERED: 1
    ports:
      - "5015:5015"
    networks:
      - fooddelivery-net

  
  ###################################
  # Personalized Homepage: The composite microservice
  ###################################
  displayPersonalizedHomepage:
    build:
      context: ./displayPersonalizedHomepage/
      dockerfile: displayPersonalizedHomepage.Dockerfile
    image: fooddelivery/personalized_homepage:latest
    restart: always
    environment:
      customer_URL: "http://customer:5006/customer"
      restaurant_URL: "http://restaurant:5007/restaurant"
      restaurant_inventory_URL: "http://restaurant_inventory:5008/restaurant_inventory"
      transaction_URL: "http://transaction:5009/transaction"
      transaction_item_URL: "http://transaction_item:5010/transaction_item"
      notification_URL: "http://notification:5011/notification"
      voucher_URL: "http://voucher:5012/voucher"
      PYTHONUNBUFFERED: 1
    ports:
      - "5013:5013"
    networks:
      - fooddelivery-net
    depends_on:
      - customer
      - restaurant
      - restaurant_inventory
      - transaction
      - transaction_item
      - notification
      - voucher


  ###################################
  # Dynamic Pricing: The Dynamic Pricing microservice
  ###################################
  calculateDynamicPricing:
    build:
      context: ./calculateDynamicPricing/
      dockerfile: calculateDynamicPricing.Dockerfile
    image: fooddelivery/dynamic_pricing:latest
    restart: always
    environment:
      restaurant_URL: "http://restaurant:5007/restaurant"
      rider_URL: "http://rider:5015/rider"
      PYTHONUNBUFFERED: 1
    ports:
      - "5016:5016"
    networks:
      - fooddelivery-net
    depends_on:
      - restaurant
      - rider

  ###################################
  # Stripe Service: Payment service using Stripe
  ###################################
  stripeService:
    build:
      context: ./stripe_service/
      dockerfile: stripe_service.Dockerfile
    image: fooddelivery/stripe_service:latest
    restart: always
    environment:
      STRIPE_API_KEY: "sk_test_51RABcdQOf6nNEYS6EtcT2rpS2rhh2C8OS27gNG9JQDFF6NZk90wiveaJabUHnF2OoCq8qyF54xCLBprVCByTMyUQ00jvBngMEk"
      STRIPE_PUBLISHABLE_KEY: "pk_test_51RABcdQOf6nNEYS6gkG9lNJJbOojM2bXxkZfgwDNfutZH6AAkiStVVqO7Z49kvRzSs2eAvggP6l5IveRoQBjZybR00I0oI8Kim"
      PYTHONUNBUFFERED: 1
    ports:
      - "5021:5021"
    networks:
      - fooddelivery-net

  ###################################
  # Process Customer Payment: The customer payment orchestration service
  ###################################
  processCustomerPayment:
    build:
      context: ./processCustomerPayment/
      dockerfile: processCustomerPayment.Dockerfile
    image: fooddelivery/process_payment:latest
    restart: always
    environment:
      dynamic_pricing_URL: "http://calculateDynamicPricing:5016/calculate_delivery_fee"
      transaction_URL: "http://transaction:5009/transaction"
      transaction_item_URL: "http://transaction_item:5010/transaction_item"
      notification_URL: "http://notification:5011/notification"
      restaurant_inventory_URL: "http://restaurant_inventory:5008/restaurant_inventory"
      customer_URL: "http://customer:5006/customer"
      voucher_URL: "http://voucher:5012/voucher"
      stripe_service_URL: "http://stripeService:5021/payment/stripe"
      PYTHONUNBUFFERED: 1
    ports:
      - "5020:5020"
    networks:
      - fooddelivery-net
    depends_on:
      - calculateDynamicPricing
      - transaction
      - transaction_item
      - notification
      - customer
      - voucher
      - stripeService
      - restaurant_inventory

  ###################################
  # Create Customer Order: The order details microservice
  ###################################
  ###################################
  # Order Details: The order details orchestration service
  ###################################
  createCustomerOrder:
    build:
      context: ./createCustomerOrder/
      dockerfile: createCustomerOrder.Dockerfile
    image: fooddelivery/customer_order:latest
    restart: always
    environment:
      transaction_URL: "http://transaction:5009/transaction"
      transaction_item_URL: "http://transaction_item:5010/transaction_item"
      restaurant_URL: "http://restaurant:5007/restaurant"
      restaurant_inventory_URL: "http://restaurant_inventory:5008/restaurant_inventory"
      customer_URL: "http://customer:5006/customer"
      rider_URL: "http://rider:5015/rider"
      voucher_URL: "http://voucher:5012/voucher"
      PYTHONUNBUFFERED: 1
    ports:
      - "5014:5014"
    networks:
      - fooddelivery-net
    depends_on:
      - transaction
      - transaction_item
      - restaurant
      - restaurant_inventory
      - customer
      - rider
      - voucher

  ###################################
  # Process Customer Refund: The customer refund orchestration service
  ###################################
  processCustomerRefund:
    build:
      context: ./processCustomerRefund/
      dockerfile: processCustomerRefund.Dockerfile
    image: fooddelivery/process_refund:latest
    restart: always
    environment:
      transaction_URL: "http://transaction:5009/transaction"
      transaction_item_URL: "http://transaction_item:5010/transaction_item"
      notification_URL: "http://notification:5011/notification"
      customer_URL: "http://customer:5006/customer"
      voucher_URL: "http://voucher:5012/voucher"
      stripe_service_URL: "http://stripeService:5021/payment/refund"
      restaurant_inventory_URL: "http://restaurant_inventory:5008/restaurant_inventory"
      PYTHONUNBUFFERED: 1
    ports:
      - "5022:5022"
    networks:
      - fooddelivery-net
    depends_on:
      - transaction
      - transaction_item
      - notification
      - customer
      - voucher
      - stripeService
      - restaurant_inventory