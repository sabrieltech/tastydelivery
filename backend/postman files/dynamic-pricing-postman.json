{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
		"name": "Food Delivery - Dynamic Pricing Service",
		"description": "API collection for testing the Dynamic Pricing microservice",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Calculate Delivery Fee",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5016/calculate_delivery_fee/REST001/RIDER001",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5016",
					"path": [
						"calculate_delivery_fee",
						"REST001",
						"RIDER001"
					]
				},
				"description": "Calculates the dynamic delivery fee between restaurant REST001 and rider RIDER001"
			},
			"response": []
		},
		{
			"name": "Calculate Delivery Fee - Close Distance",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5016/calculate_delivery_fee/REST002/RIDER001",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5016",
					"path": [
						"calculate_delivery_fee",
						"REST002",
						"RIDER001"
					]
				},
				"description": "Calculates fee for a short distance delivery (expected to be under 3km with no distance surcharge)"
			},
			"response": []
		},
		{
			"name": "Calculate Delivery Fee - Medium Distance",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5016/calculate_delivery_fee/REST003/RIDER002",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5016",
					"path": [
						"calculate_delivery_fee",
						"REST003",
						"RIDER002"
					]
				},
				"description": "Calculates fee for a medium distance delivery (expected to be 3-10km with $1.50 surcharge)"
			},
			"response": []
		},
		{
			"name": "Calculate Delivery Fee - Long Distance",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5016/calculate_delivery_fee/REST004/RIDER003",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5016",
					"path": [
						"calculate_delivery_fee",
						"REST004",
						"RIDER003"
					]
				},
				"description": "Calculates fee for a long distance delivery (expected to be >10km with $3.00 surcharge)"
			},
			"response": []
		},
		{
			"name": "Calculate Delivery Fee - Invalid Restaurant ID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5016/calculate_delivery_fee/INVALID_REST/RIDER001",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5016",
					"path": [
						"calculate_delivery_fee",
						"INVALID_REST",
						"RIDER001"
					]
				},
				"description": "Tests error handling for an invalid restaurant ID"
			},
			"response": []
		},
		{
			"name": "Calculate Delivery Fee - Invalid Rider ID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5016/calculate_delivery_fee/REST001/INVALID_RIDER",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5016",
					"path": [
						"calculate_delivery_fee",
						"REST001",
						"INVALID_RIDER"
					]
				},
				"description": "Tests error handling for an invalid rider ID"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Basic response validation for dynamic pricing endpoints",
					"if (pm.response.code === 200) {",
					"    var jsonData = pm.response.json();",
					"    ",
					"    // Check if the response structure is correct",
					"    pm.test(\"Response has correct structure\", function() {",
					"        pm.expect(jsonData).to.have.property('code');",
					"        pm.expect(jsonData).to.have.property('data');",
					"        pm.expect(jsonData.data).to.be.an('object');",
					"    });",
					"    ",
					"    // Check for expected data sections",
					"    pm.test(\"Response contains expected data sections\", function() {",
					"        pm.expect(jsonData.data).to.have.property('restaurant');",
					"        pm.expect(jsonData.data).to.have.property('rider');",
					"        pm.expect(jsonData.data).to.have.property('travel_info');",
					"        pm.expect(jsonData.data).to.have.property('price_info');",
					"        pm.expect(jsonData.data).to.have.property('delivery_fee');",
					"    });",
					"    ",
					"    // Validate restaurant info",
					"    pm.test(\"Restaurant info is valid\", function() {",
					"        pm.expect(jsonData.data.restaurant).to.have.property('id');",
					"        pm.expect(jsonData.data.restaurant).to.have.property('name');",
					"        pm.expect(jsonData.data.restaurant).to.have.property('coordinates');",
					"        pm.expect(jsonData.data.restaurant.coordinates).to.be.an('array').with.lengthOf(2);",
					"    });",
					"    ",
					"    // Validate rider info",
					"    pm.test(\"Rider info is valid\", function() {",
					"        pm.expect(jsonData.data.rider).to.have.property('id');",
					"        pm.expect(jsonData.data.rider).to.have.property('name');",
					"        pm.expect(jsonData.data.rider).to.have.property('coordinates');",
					"        pm.expect(jsonData.data.rider.coordinates).to.be.an('array').with.lengthOf(2);",
					"    });",
					"    ",
					"    // Validate travel info",
					"    pm.test(\"Travel info is valid\", function() {",
					"        pm.expect(jsonData.data.travel_info).to.have.property('duration');",
					"        pm.expect(jsonData.data.travel_info).to.have.property('distance');",
					"    });",
					"    ",
					"    // Validate price info",
					"    pm.test(\"Price info is valid\", function() {",
					"        pm.expect(jsonData.data.price_info).to.have.property('base_fare');",
					"        pm.expect(jsonData.data.price_info).to.have.property('time_charge');",
					"        pm.expect(jsonData.data.price_info).to.have.property('distance_km');",
					"        pm.expect(jsonData.data.price_info).to.have.property('distance_surcharge');",
					"        pm.expect(jsonData.data.price_info).to.have.property('total_price');",
					"        ",
					"        // Check that the total price matches the delivery fee",
					"        pm.expect(jsonData.data.price_info.total_price).to.equal(jsonData.data.delivery_fee);",
					"        ",
					"        // Verify base fare is $2.50",
					"        pm.expect(jsonData.data.price_info.base_fare).to.equal(2.50);",
					"        ",
					"        // Verify distance surcharge based on distance",
					"        const distance = jsonData.data.price_info.distance_km;",
					"        if (distance <= 3) {",
					"            pm.expect(jsonData.data.price_info.distance_surcharge).to.equal(0);",
					"        } else if (distance <= 10) {",
					"            pm.expect(jsonData.data.price_info.distance_surcharge).to.equal(1.50);",
					"        } else {",
					"            pm.expect(jsonData.data.price_info.distance_surcharge).to.equal(3.00);",
					"        }",
					"    });",
					"    ",
					"    // Validate delivery fee",
					"    pm.test(\"Delivery fee is valid\", function() {",
					"        pm.expect(jsonData.data.delivery_fee).to.be.a('number');",
					"        pm.expect(jsonData.data.delivery_fee).to.be.at.least(2.50); // Should be at least the base fare",
					"    });",
					"}"
				]
			}
		}
	]
}