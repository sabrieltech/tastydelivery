{
  "info": {
    "_postman_id": "b1c2d3e4-f5g6-h7i8-j9k0-l1m2n3o4p5q6",
    "name": "Food Delivery - Rider Service",
    "description": "API collection for testing the Rider microservice (Updated for REST API)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Get All Riders",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:5015/rider",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5015",
          "path": [
            "rider"
          ]
        },
        "description": "Retrieves all riders in the system"
      },
      "response": []
    },
    {
      "name": "Get Rider by ID",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:5015/rider/RIDER001",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5015",
          "path": [
            "rider",
            "RIDER001"
          ]
        },
        "description": "Retrieves a specific rider by ID"
      },
      "response": []
    },
    {
      "name": "Get Riders by Status",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:5015/rider/status/Available",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5015",
          "path": [
            "rider",
            "status",
            "Available"
          ]
        },
        "description": "Retrieves all riders with a specific status (Available, On Delivery, Offline)"
      },
      "response": []
    },
    {
      "name": "Get Riders by Vehicle Type",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:5015/rider/vehicle/Motorcycle",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5015",
          "path": [
            "rider",
            "vehicle",
            "Motorcycle"
          ]
        },
        "description": "Retrieves all riders with a specific vehicle type (Bicycle, Motorcycle, Car)"
      },
      "response": []
    },
    {
      "name": "Get Available Riders",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:5015/rider/available",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5015",
          "path": [
            "rider",
            "available"
          ]
        },
        "description": "Retrieves all riders with 'Available' status"
      },
      "response": []
    },
    {
      "name": "Get Rider by Transaction ID",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:5015/rider/transaction/TX12345",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5015",
          "path": [
            "rider",
            "transaction",
            "TX12345"
          ]
        },
        "description": "Retrieves the rider assigned to a specific transaction"
      },
      "response": []
    },
    {
      "name": "Find Nearest Available Rider",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"latitude\": 1.3521,\n    \"longitude\": 103.8198,\n    \"vehicle_type\": \"Motorcycle\"\n}"
        },
        "url": {
          "raw": "http://localhost:5015/rider/nearest",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5015",
          "path": [
            "rider",
            "nearest"
          ]
        },
        "description": "Finds the nearest available rider to the given coordinates, optionally filtering by vehicle type"
      },
      "response": []
    },
    {
      "name": "Create Rider",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"John Delivery\",\n    \"phone_number\": \"+65 91234567\",\n    \"vehicle_type\": \"Motorcycle\",\n    \"latitude\": 1.3521,\n    \"longitude\": 103.8198,\n    \"availability_status\": \"Available\"\n}"
        },
        "url": {
          "raw": "http://localhost:5015/rider/RIDER001",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5015",
          "path": [
            "rider",
            "RIDER001"
          ]
        },
        "description": "Creates a new rider with the given information"
      },
      "response": []
    },
    {
      "name": "Update Rider",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"phone_number\": \"+65 98765432\",\n    \"vehicle_type\": \"Car\",\n    \"latitude\": 1.3522,\n    \"longitude\": 103.8199\n}"
        },
        "url": {
          "raw": "http://localhost:5015/rider/RIDER001",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5015",
          "path": [
            "rider",
            "RIDER001"
          ]
        },
        "description": "Updates an existing rider's information"
      },
      "response": []
    },
    {
      "name": "Update Rider Location",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"latitude\": 1.3523,\n    \"longitude\": 103.8200\n}"
        },
        "url": {
          "raw": "http://localhost:5015/rider/RIDER001/location",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5015",
          "path": [
            "rider",
            "RIDER001",
            "location"
          ]
        },
        "description": "Updates a rider's location"
      },
      "response": []
    },
    {
      "name": "Update Rider Status",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"availability_status\": \"On Delivery\"\n}"
        },
        "url": {
          "raw": "http://localhost:5015/rider/RIDER001/status",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5015",
          "path": [
            "rider",
            "RIDER001",
            "status"
          ]
        },
        "description": "Updates a rider's availability status"
      },
      "response": []
    },
    {
      "name": "Assign Transaction to Rider",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"transaction_id\": \"TX12345\"\n}"
        },
        "url": {
          "raw": "http://localhost:5015/rider/RIDER001/assign",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5015",
          "path": [
            "rider",
            "RIDER001",
            "assign"
          ]
        },
        "description": "Assigns a transaction to a rider and changes their status to 'On Delivery'"
      },
      "response": []
    },
    {
      "name": "Unassign Transaction from Rider",
      "request": {
        "method": "PUT",
        "header": [],
        "url": {
          "raw": "http://localhost:5015/rider/RIDER001/unassign",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5015",
          "path": [
            "rider",
            "RIDER001",
            "unassign"
          ]
        },
        "description": "Unassigns the current transaction from a rider and changes their status to 'Available'"
      },
      "response": []
    },
    {
      "name": "Delete Rider",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "http://localhost:5015/rider/RIDER001",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "5015",
          "path": [
            "rider",
            "RIDER001"
          ]
        },
        "description": "Deletes a rider"
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Basic response validation for rider endpoints",
          "if (pm.response.code === 200 || pm.response.code === 201) {",
          "    var jsonData = pm.response.json();",
          "    ",
          "    // Check if the response structure is correct",
          "    pm.test(\"Response has correct structure\", function() {",
          "        pm.expect(jsonData).to.have.property('code');",
          "        if (jsonData.data) {",
          "            pm.expect(jsonData.data).to.be.an('object');",
          "        }",
          "    });",
          "    ",
          "    // If it's a single rider response, validate rider data",
          "    if (jsonData.data && !jsonData.data.riders && jsonData.data.rider_id) {",
          "        pm.test(\"Rider data is valid\", function() {",
          "            pm.expect(jsonData.data).to.have.property('rider_id');",
          "            pm.expect(jsonData.data).to.have.property('name');",
          "            pm.expect(jsonData.data).to.have.property('phone_number');",
          "            pm.expect(jsonData.data).to.have.property('vehicle_type');",
          "            pm.expect(jsonData.data).to.have.property('availability_status');",
          "            pm.expect(jsonData.data).to.have.property('latitude');",
          "            pm.expect(jsonData.data).to.have.property('longitude');",
          "        });",
          "    }",
          "    ",
          "    // If it's a rider list response, validate the first rider if available",
          "    if (jsonData.data && jsonData.data.riders && jsonData.data.riders.length > 0) {",
          "        pm.test(\"Rider list data is valid\", function() {",
          "            pm.expect(jsonData.data.riders[0]).to.have.property('rider_id');",
          "            pm.expect(jsonData.data.riders[0]).to.have.property('name');",
          "            pm.expect(jsonData.data.riders[0]).to.have.property('phone_number');",
          "            pm.expect(jsonData.data.riders[0]).to.have.property('vehicle_type');",
          "            pm.expect(jsonData.data.riders[0]).to.have.property('availability_status');",
          "            pm.expect(jsonData.data.riders[0]).to.have.property('latitude');",
          "            pm.expect(jsonData.data.riders[0]).to.have.property('longitude');",
          "        });",
          "    }",
          "    ",
          "    // If it's a nearest rider response, validate structure",
          "    if (jsonData.data && jsonData.data.rider && jsonData.data.distance) {",
          "        pm.test(\"Nearest rider data is valid\", function() {",
          "            pm.expect(jsonData.data.rider).to.have.property('rider_id');",
          "            pm.expect(jsonData.data.rider).to.have.property('name');",
          "            pm.expect(jsonData.data.rider).to.have.property('latitude');",
          "            pm.expect(jsonData.data.rider).to.have.property('longitude');",
          "            pm.expect(jsonData.data.rider).to.have.property('availability_status');",
          "            pm.expect(jsonData.data).to.have.property('distance');",
          "            pm.expect(jsonData.data.distance).to.be.a('number');",
          "        });",
          "    }",
          "}"
        ]
      }
    }
  ]
}