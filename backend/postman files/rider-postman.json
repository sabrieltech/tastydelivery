{
	"info": {
		"_postman_id": "b1c2d3e4-f5g6-h7i8-j9k0-l1m2n3o4p5q6",
		"name": "Food Delivery - Rider Service",
		"description": "API collection for testing the Rider microservice",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get All Riders",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5015/rider",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5015",
					"path": [
						"rider"
					]
				},
				"description": "Retrieves all riders in the system"
			},
			"response": []
		},
		{
			"name": "Get Rider by ID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5015/rider/RIDER001",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5015",
					"path": [
						"rider",
						"RIDER001"
					]
				},
				"description": "Retrieves a specific rider by ID"
			},
			"response": []
		},
		{
			"name": "Get Rider by Username",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5015/rider/username/rider1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5015",
					"path": [
						"rider",
						"username",
						"rider1"
					]
				},
				"description": "Retrieves a rider by username"
			},
			"response": []
		},
		{
			"name": "Get Available Riders",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5015/rider/available",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5015",
					"path": [
						"rider",
						"available"
					]
				},
				"description": "Retrieves all riders with 'Available' status"
			},
			"response": []
		},
		{
			"name": "Find Nearest Available Rider",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"latitude\": 1.3521,\n    \"longitude\": 103.8198\n}"
				},
				"url": {
					"raw": "http://localhost:5015/rider/nearest",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5015",
					"path": [
						"rider",
						"nearest"
					]
				},
				"description": "Finds the nearest available rider to the given coordinates"
			},
			"response": []
		},
		{
			"name": "Create Rider",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"rider1\",\n    \"password_hash\": \"$2b$12$1tvcIbBeS5RNrbG84zrYKuCkS2HFGzD8x0qUJadHvVwO9ocTPFDJi\",\n    \"name\": \"John Delivery\",\n    \"email\": \"john.delivery@example.com\",\n    \"phone_number\": \"+65 91234567\",\n    \"latitude\": 1.3521,\n    \"longitude\": 103.8198,\n    \"status\": \"Available\",\n    \"rating\": 4.8\n}"
				},
				"url": {
					"raw": "http://localhost:5015/rider/RIDER001",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5015",
					"path": [
						"rider",
						"RIDER001"
					]
				},
				"description": "Creates a new rider with the given information"
			},
			"response": []
		},
		{
			"name": "Update Rider",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"phone_number\": \"+65 98765432\",\n    \"latitude\": 1.3522,\n    \"longitude\": 103.8199\n}"
				},
				"url": {
					"raw": "http://localhost:5015/rider/RIDER001",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5015",
					"path": [
						"rider",
						"RIDER001"
					]
				},
				"description": "Updates an existing rider's information"
			},
			"response": []
		},
		{
			"name": "Update Rider Location",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"latitude\": 1.3523,\n    \"longitude\": 103.8200\n}"
				},
				"url": {
					"raw": "http://localhost:5015/rider/RIDER001/location",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5015",
					"path": [
						"rider",
						"RIDER001",
						"location"
					]
				},
				"description": "Updates a rider's location"
			},
			"response": []
		},
		{
			"name": "Update Rider Status",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"status\": \"Busy\"\n}"
				},
				"url": {
					"raw": "http://localhost:5015/rider/RIDER001/status",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5015",
					"path": [
						"rider",
						"RIDER001",
						"status"
					]
				},
				"description": "Updates a rider's status"
			},
			"response": []
		},
		{
			"name": "Update Rider Rating",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rating\": 4.9\n}"
				},
				"url": {
					"raw": "http://localhost:5015/rider/RIDER001/rating",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5015",
					"path": [
						"rider",
						"RIDER001",
						"rating"
					]
				},
				"description": "Updates a rider's rating"
			},
			"response": []
		},
		{
			"name": "Delete Rider",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5015/rider/RIDER001",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5015",
					"path": [
						"rider",
						"RIDER001"
					]
				},
				"description": "Deletes a rider"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Basic response validation for rider endpoints",
					"if (pm.response.code === 200 || pm.response.code === 201) {",
					"    var jsonData = pm.response.json();",
					"    ",
					"    // Check if the response structure is correct",
					"    pm.test(\"Response has correct structure\", function() {",
					"        pm.expect(jsonData).to.have.property('code');",
					"        if (jsonData.data) {",
					"            pm.expect(jsonData.data).to.be.an('object');",
					"        }",
					"    });",
					"    ",
					"    // If it's a single rider response, validate rider data",
					"    if (jsonData.data && !jsonData.data.riders && jsonData.data.rider_id) {",
					"        pm.test(\"Rider data is valid\", function() {",
					"            pm.expect(jsonData.data).to.have.property('rider_id');",
					"            pm.expect(jsonData.data).to.have.property('name');",
					"            pm.expect(jsonData.data).to.have.property('email');",
					"            pm.expect(jsonData.data).to.have.property('phone_number');",
					"            pm.expect(jsonData.data).to.have.property('latitude');",
					"            pm.expect(jsonData.data).to.have.property('longitude');",
					"            pm.expect(jsonData.data).to.have.property('status');",
					"            pm.expect(jsonData.data).to.have.property('rating');",
					"        });",
					"    }",
					"    ",
					"    // If it's a rider list response, validate the first rider if available",
					"    if (jsonData.data && jsonData.data.riders && jsonData.data.riders.length > 0) {",
					"        pm.test(\"Rider list data is valid\", function() {",
					"            pm.expect(jsonData.data.riders[0]).to.have.property('rider_id');",
					"            pm.expect(jsonData.data.riders[0]).to.have.property('name');",
					"            pm.expect(jsonData.data.riders[0]).to.have.property('email');",
					"            pm.expect(jsonData.data.riders[0]).to.have.property('phone_number');",
					"            pm.expect(jsonData.data.riders[0]).to.have.property('latitude');",
					"            pm.expect(jsonData.data.riders[0]).to.have.property('longitude');",
					"            pm.expect(jsonData.data.riders[0]).to.have.property('status');",
					"            pm.expect(jsonData.data.riders[0]).to.have.property('rating');",
					"        });",
					"    }",
					"    ",
					"    // If it's a nearest rider response, validate structure",
					"    if (jsonData.data && jsonData.data.rider && jsonData.data.distance) {",
					"        pm.test(\"Nearest rider data is valid\", function() {",
					"            pm.expect(jsonData.data.rider).to.have.property('rider_id');",
					"            pm.expect(jsonData.data.rider).to.have.property('name');",
					"            pm.expect(jsonData.data.rider).to.have.property('latitude');",
					"            pm.expect(jsonData.data.rider).to.have.property('longitude');",
					"            pm.expect(jsonData.data.rider).to.have.property('status');",
					"            pm.expect(jsonData.data).to.have.property('distance');",
					"            pm.expect(jsonData.data.distance).to.be.a('number');",
					"        });",
					"    }",
					"}"
				]
			}
		}
	]
}